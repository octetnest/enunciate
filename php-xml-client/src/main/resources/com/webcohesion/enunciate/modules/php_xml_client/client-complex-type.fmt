[#ftl]
[#--

    Copyright Â© 2006-2016 Web Cohesion (info@webcohesion.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

--]
[#--template for the client-side complex type.--]
[#macro createPhpXmlObject targetVariable currentClass indent]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Double" || currentClass == "Boolean" || currentClass == "Array"]
${indent}${targetVariable} = '';
${indent}while ($xml->read() && $xml->hasValue) {
${indent}    ${targetVariable} = ${targetVariable} . $xml->value;
${indent}}
    [#elseif currentClass == "Object"]
${indent}${targetVariable} = new \SimpleXMLElement($xml);
    [#else]
${indent}${targetVariable} = new \${currentClass}($xml);
    [/#if]
[/#macro]
[#macro toPhpXmlInstance currentIdentifier currentClass indent]
    [#if currentClass == "String" || currentClass == "Integer" || currentClass == "Double" || currentClass == "Boolean" || currentClass == "Array"]
${indent}$writer->text(${currentIdentifier});
    [#else]
${indent}${currentIdentifier}->writeXmlContents($writer);
    [/#if]
[/#macro]
[#macro toPhpXmlType currentIdentifier currentClass indent]
[#switch currentClass]
    [#case "Boolean"]
${indent}${currentIdentifier} = filter_var($child, FILTER_VALIDATE_BOOLEAN);
    [#break]
    [#case "Double"]
${indent}${currentIdentifier} = floatval($child);
    [#break]   
    [#case "Integer"]
${indent}${currentIdentifier} = intval($child);
    [#break]        
    [#default]
${indent}${currentIdentifier} = $child;
[/#switch]
[/#macro]
[#macro writeComplexType type]
[#-- @ftlvariable name="type" type="com.webcohesion.enunciate.modules.jaxb.model.TypeDefinition" --]

namespace ${namespaceFor(type)};

/**
[#if type.javaDoc??]
 * ${((type.javaDoc.toString())!"(no documentation provided)")?replace("\n", "\n     * ")}
[#else]
 * (no documentation provided)
[/#if]
 */
class ${simpleNameFor(type)}[#if !type.baseObject] extends \${classnameFor(type.superclass)}[/#if]
{
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]

    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(attribute)}
     */
    private $${attribute.clientSimpleName};
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(type.value)}
     */
    private $${type.value.clientSimpleName};
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]

    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n     * ")}
     *
     * @var ${typeNameFor(element)}
     */
    private $${element.clientSimpleName};
        [/#if]
      [/#list]
    [/#if]
    [#if type.hasAnyAttribute]

    /**
     * Additional attributes.
     */
    private $otherAttributes = array();
    [/#if]
    [#if type.anyElement??]

    /**
     * ${(type.anyElement.javaDoc.return!type.anyElement.docValue!"Additional elements.")?chop_linebreak?replace("\n", "\n   * ")}
     */
    private $${type.anyElement.clientSimpleName} = array();
    [/#if]

    /**
     * Constructs a ${simpleNameFor(type)} from an XMLReader
     *
     * @param \XMLReader $reader The reader.
     */
    public function __construct($reader = null)
    {
        $success = true;
        while ($success && $reader->nodeType != \XMLReader::ELEMENT) {
            $success = $reader->read();
        }
        if ($reader->nodeType != \XMLReader::ELEMENT) {
            throw new \Exception("Unable to read XML: no start element found.");
        }

        $this->initFromReader($reader);
    }

    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(attribute)}
     */
    public function get${attribute.clientSimpleName?cap_first}()
    {
        return $this->${attribute.clientSimpleName};
    }

    /**
     * ${(attribute.javaDoc.return!attribute.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(attribute)} $${attribute.clientSimpleName}
     */
    public function set${attribute.clientSimpleName?cap_first}($${attribute.clientSimpleName})
    {
        $this->${attribute.clientSimpleName} = $${attribute.clientSimpleName};
    }
      [/#if]
    [/#list]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(type.value)}
     */
    public function get${type.value.clientSimpleName?cap_first}()
    {
        return $this->${type.value.clientSimpleName};
    }

    /**
     * ${(type.value.javaDoc.return!type.value.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(type.value)} $${type.value.clientSimpleName}
     */
    public function set${type.value.clientSimpleName?cap_first}($${type.value.clientSimpleName})
    {
        $this->${type.value.clientSimpleName} = $${type.value.clientSimpleName};
    }
      [/#if]
    [#else]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @return ${typeNameFor(element)}
     */
    public function get${element.clientSimpleName?cap_first}()
    {
        return $this->${element.clientSimpleName};
    }

    /**
     * ${(element.javaDoc.return!element.docValue!"(no documentation provided)")?chop_linebreak?html?replace("\n", "\n       * ")}
     *
     * @param ${typeNameFor(element)} $${element.clientSimpleName}
     */
    public function set${element.clientSimpleName?cap_first}($${element.clientSimpleName})
    {
        $this->${element.clientSimpleName} = $${element.clientSimpleName};
    }
        [/#if]
      [/#list]
    [/#if]   
  [#if type.baseObject]

    /**
     * Initializes this ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader to use to initialize this object.
     */
    public function initFromReader($xml)
    {
        $empty = $xml->isEmptyElement;

        if ($xml->hasAttributes) {
            $moreAttributes = $xml->moveToFirstAttribute();
            while ($moreAttributes) {
                if (!$this->setKnownAttribute($xml)) {
      [#if type.hasAnyAttribute]
                    $attr = array();
                    $attr[$xml->localName] = $xml->value;
                    array_push($this->$otherAttributes, $attr);
      [#else]
                    //skip unknown attributes...
      [/#if]
                }
                $moreAttributes = $xml->moveToNextAttribute();
            }
        }
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]

        if (!$empty) {
[@createPhpXmlObject '$this->${type.value.clientSimpleName}' '${classnameFor(type.value)}' '            '/]
        }
      [/#if]
    [#else]

        if (!$empty) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc.
                }
                else if (!$xml->isEmptyElement && !$this->setKnownChildElement($xml)) {
                    $d = $xml->depth;
                    $n = $xml->localName;
                    $ns = $xml->namespaceURI;
      [#if type.anyElement??]
                    $dom = new \DOMDocument();
                    $nodeFactory = $dom;
                    $dom->formatOutput = true;

                    $e = $nodeFactory->createElementNS($xml->namespaceURI, $xml->localName);
                    $dom->appendChild($e);
                    if ($xml->hasAttributes) {
                        $moreAttributes = $xml->moveToFirstAttribute();
                        while ($moreAttributes) {
                            $e->setAttributeNS($xml->namespaceURI, $xml->localName, $xml->value);
                            $moreAttributes = $xml->moveToNextAttribute();
                        }
                    }
                    $dom = $e;

                    //create any child elements...
                    while ($xml->read() && !$this->hasSameValue($d, $xml->depth, false) && !$this->hasSameValue($n, $xml->localName) && !$this->hasSameValue($ns, $xml->namespaceURI)) {
                        if ($xml->nodeType == \XMLReader::ELEMENT) {
                            $e = $nodeFactory->createElementNS($xml->namespaceURI, $xml->localName);
                            $dom->appendChild($e);
                            if ($xml->hasAttributes) {
                                $moreAttributes = $xml->moveToFirstAttribute();
                                while ($moreAttributes) {
                                    $e->setAttributeNS($xml->namespaceURI, $xml->localName, $xml->value);
                                    $moreAttributes = $xml->moveToNextAttribute();
                                }
                            }
                            $dom = $e;
                        }
                        else if ($xml->nodeType == \XMLReader::TEXT) {
                            $dom->textContent = $xml->value;
                        }
                        else if ($xml->nodeType == \XMLReader::END_ELEMENT) {
                            $dom = $dom->parentNode;
                        }
                    }
                    array_push($this->${type.anyElement.clientSimpleName}, $nodeFactory);
      [#else]
                    //skip the unknown element
                    while ($xml->read() && !$this->hasSameValue($d, $xml->depth, false) && !$this->hasSameValue($n, $xml->localName) && !$this->hasSameValue($ns, $xml->namespaceURI));
      [/#if]
                }
                $xml->read(); //advance the reader.
            }
        }
    [/#if]
    }

  [/#if]

    /**
     * Evaluates if two values are the same using strict comparison.
     * 
     * @param mixed $n1 the first value
     * @param mixed $n2 the second value
     * @param boolean $evaluateTwoEmptyValuesToFalse treat two empty values (as
     * deemed empty by <code>empty()</code> as not equal. This is useful when
     * comparing text nodes (which does not have a name) or empty namespace.
     * @return boolean a <code>boolean</code> indicating if the two values are
     * are the same using the strict '===' operator.
     */
    private function hasSameValue($n1, $n2, $evaluateTwoEmptyValuesToFalse = true) {
      if ($evaluateTwoEmptyValuesToFalse && empty($n1) && empty($n2)) {
        return false;
      }
    
      return $n1 === $n2;
    }

    /**
     * Sets a known child element of ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether a child element was set.
     */
    protected function setKnownChildElement($xml) {
    [#if type.elements?size > 0]
      [#assign writeElse=false/]
      [#if !type.baseObject]
        $happened = parent::setKnownChildElement($xml);
        if ($happened) {
          return true;
        }
        [#assign writeElse=true/]
      [#else]
        $happened = false;
      [/#if]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.wrapped]
        [#if writeElse]else [/#if]if (($xml->localName == '${element.wrapperName}') && ([#if ((element.wrapperNamespace??) && (element.wrapperNamespace != ""))]$xml->namespaceURI == '${element.wrapperNamespace}'[#else]empty($xml->namespaceURI)[/#if]) && (!$xml->isEmptyElement)) {
            $xml->read();
            while ($xml->nodeType != \XMLReader::END_ELEMENT) {
                if ($xml->nodeType != \XMLReader::ELEMENT) {
                    //no-op: skip any insignificant whitespace, comments, etc. in the wrapper
                }
            [#assign writeElse=false/]
          [/#if]
          [#list element.choices as choice]
            [#if choice.ref??]
        [#if writeElse]else [/#if]if (($xml->localName == '${choice.ref.localPart}') && ([#if ((choice.ref.namespaceURI??) && (choice.ref.namespaceURI != ""))]$xml->namespaceURI == '${choice.ref.namespaceURI}'[#else]empty($xml->namespaceURI)[/#if])) {
            [#else]
        [#if writeElse]else [/#if]if (($xml->localName == '${choice.name}') && ([#if ((choice.namespace??) && (choice.namespace != ""))]$xml->namespaceURI == '${choice.namespace}'[#else]empty($xml->namespaceURI)[/#if])) {
            [/#if]
[@createPhpXmlObject '$child' '${classnameFor(choice.bareAccessorType)}' '            '/]
            [#if element.collectionType]
            if (!isset($this->${element.clientSimpleName})) {
                $this->${element.clientSimpleName} = array();
            }
            array_push($this->${element.clientSimpleName}, $child);
            [#else]
[@toPhpXmlType '$this->${element.clientSimpleName}' '${classnameFor(element)}' '            '/]
            [/#if]
            $happened = true;
        }
            [#assign writeElse=true/]
          [/#list]
          [#if element.wrapped]
        $xml->read();
        }
            $happened = true;
        }
          [/#if]
        [/#if]
      [/#list]
        return $happened;
    [#else]
        return false;
    [/#if]
    }

    /**
     * Sets a known attribute of ${simpleNameFor(type)} from an XML reader.
     *
     * @param \XMLReader $xml The reader.
     * @return bool Whether an attribute was set.
     */
    protected function setKnownAttribute($xml) {
    [#assign writeElse=false/]
    [#if !type.baseObject]
        if (parent::setKnownAttribute($xml)) {
            return true;
        }
      [#assign writeElse=true/]
    [/#if]
    [#list type.attributes as attribute]
      [#if !isFacetExcluded(attribute)]
        [#if writeElse]else [/#if]if (($xml->localName == '${attribute.name}') && ([#if ((attribute.namespace??) && (attribute.namespace != ""))]$xml->namespaceURI == '${attribute.namespace}'[#else]empty($xml->namespaceURI)[/#if])) {
            $this->${attribute.clientSimpleName} = $xml->value;
            return true;
        }
      [/#if]
    [/#list]

        return false;
    }
    [#if findRootElement(type)??]
      [#assign rootElement=findRootElement(type)/]
      [#assign localReferencedNamespaces=referencedNamespaces(rootElement)/]

    /**
     * Writes this ${simpleNameFor(type)} to an XML writer.
     *
     * @param \XMLWriter $writer The XML writer.
     * @param bool $includeNamespaces Whether to write out the namespaces in the element.
     */
    public function toXml($writer, $includeNamespaces = true)
    {
        $writer->startElementNS([#if ((rootElement.namespace??) && (rootElement.namespace != ""))]'${prefix(rootElement.namespace)}'[#else]null[/#if], '${rootElement.name}', null);
      [#if localReferencedNamespaces?size > 0]
        if ($includeNamespaces) {
        [#list localReferencedNamespaces as referencedNamespace]
          [#if ((referencedNamespace??) && (referencedNamespace?length > 0))]
            $writer->writeAttributeNs('xmlns', '${prefix(referencedNamespace)}', null, '${referencedNamespace}');
          [/#if]
        [/#list]
        }
      [/#if]
        $this->writeXmlContents($writer);
        $writer->endElement();
    }
    [/#if]

    /**
     * Writes the contents of this ${simpleNameFor(type)} to an XML writer. The startElement is expected to be already provided.
     *
     * @param \XMLWriter $writer The XML writer.
     */
    public function writeXmlContents($writer)
    {
    [#if type.attributes?size > 0]
      [#list type.attributes as attribute]
        [#if !isFacetExcluded(attribute)]
        if ($this->${attribute.clientSimpleName}) {
            $writer->writeAttribute('[#if ((attribute.namespace??) && (attribute.namespace != ""))]${prefix(attribute.namespace)}:[/#if]${attribute.name}', $this->${attribute.clientSimpleName});
        }
        [/#if]
      [/#list]
    [/#if]
    [#if !type.baseObject]
        parent::writeXmlContents($writer);
    [/#if]
    [#if type.value??]
      [#if !isFacetExcluded(type.value)]
        if ($this->${type.value.clientSimpleName}) {
            $writer->text($this->${type.value.clientSimpleName});
        }
      [/#if]
    [#elseif type.elements?size > 0]
      [#list type.elements as element]
        [#if !isFacetExcluded(element)]
          [#if element.collectionType]
        if ($this->${element.clientSimpleName}) {
            [#if element.wrapped]
            $writer->startElementNs([#if ((element.wrapperNamespace??) && (element.wrapperNamespace != ""))]'${prefix(element.wrapperNamespace)}'[#else]null[/#if], '${element.wrapperName}', null);
            [/#if]
            foreach ($this->${element.clientSimpleName} as $i => $x) {
              [#if element.choices?size > 1]
                [#assign writeElse=false/]
                [#list element.choices as choice]
                [#if writeElse]else [/#if]if ($x instanceof \${classnameFor(choice.bareAccessorType)}) {
                  [#if choice.ref??]
                    $x->toXml($writer, false);
                  [#else]
                    $writer->startElementNs([#if ((choice.namespace??) && (choice.namespace != ""))]'${prefix(choice.namespace)}'[#else]null[/#if], '${choice.name}', null);
                    [@toPhpXmlInstance '$x' '${classnameFor(choice.bareAccessorType)}' '                    '/]
                    $writer->endElement();
                  [/#if]
                }
                [/#list]
              [#elseif element.elementRefs!false || element.ref??]
                $x->toXml($writer, false);
              [#else]
                $writer->startElementNs([#if ((element.namespace??) && (element.namespace != ""))]'${prefix(element.namespace)}'[#else]null[/#if], '${element.name}', null);
                [@toPhpXmlInstance '$x' '${classnameFor(element.collectionItemType)}' '                '/]
                $writer->endElement();
              [/#if]
            }
            [#if element.wrapped]
            $writer->endElement();
            [/#if]
        }
          [#else]
        if ($this->${element.clientSimpleName}) {
            [#if element.elementRefs!false || element.ref??]
            $this->${element.clientSimpleName}->toXml($writer, false);
            [#else]
            $writer->startElementNs([#if ((element.namespace??) && (element.namespace != ""))]'${prefix(element.namespace)}'[#else]null[/#if], '${element.name}', null);
            [@toPhpXmlInstance '$this->${element.clientSimpleName}' '${classnameFor(element)}' '            '/]
            $writer->endElement();
            [/#if]
        }
          [/#if]
        [/#if]
      [/#list]
    [/#if]
    }
}
[/#macro]